##-----------------------------------------------------------------------------
## Title      : Virtex-6 Embedded Tri-Mode Ethernet MAC Wrapper Example
##              Constraints File
## Project    : Virtex-6 Embedded Tri-Mode Ethernet MAC Wrapper
## File       : v6_emac_v1_6_example_design.ucf
## Version    : 1.6
##-----------------------------------------------------------------------------
##
## (c) Copyright 2009-2012 Xilinx, Inc. All rights reserved.
##
## This file contains confidential and proprietary information
## of Xilinx, Inc. and is protected under U.S. and
## international copyright and other intellectual property
## laws.
##
## DISCLAIMER
## This disclaimer is not a license and does not grant any
## rights to the materials distributed herewith. Except as
## otherwise provided in a valid license issued to you by
## Xilinx, and to the maximum extent permitted by applicable
## law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
## WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
## AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
## BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
## INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
## (2) Xilinx shall not be liable (whether in contract or tort,
## including negligence, or under any other theory of
## liability) for any loss or damage of any kind or nature
## related to, arising under or in connection with these
## materials, including for any direct, or any indirect,
## special, incidental, or consequential loss or damage
## (including loss of data, profits, goodwill, or any type of
## loss or damage suffered as a result of any action brought
## by a third party) even if such damage or loss was
## reasonably foreseeable or Xilinx had been advised of the
## possibility of the same.
##
## CRITICAL APPLICATIONS
## Xilinx products are not designed or intended to be fail-
## safe, or for use in any application requiring fail-safe
## performance, such as life-support or safety devices or
## systems, Class III medical devices, nuclear facilities,
## applications related to the deployment of airbags, or any
## other applications that could lead to death, personal
## injury, or severe property or environmental damage
## (individually and collectively, "Critical
## Applications"). Customer assumes the sole risk and
## liability of any use of Xilinx products in Critical
## Applications, subject only to applicable laws and
## regulations governing limitations on product liability.
##
## THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
## PART OF THIS FILE AT ALL TIMES.
##
##-----------------------------------------------------------------------------
## Description:  This is an example constraints file for the Virtex-6 Embedded
##               Tri-Mode Ethernet MAC Wrapper. It is designed to apply to the
##               example design hierarchical level. In general, the constraints
##               in this file are necessary to implement a correctly-
##               functioning Ethernet MAC, and some constraints must be
##               modified according to your specific design and pinout choices.
##-----------------------------------------------------------------------------


########################## ETHERNET CONSTRAINTS ##########################3

# This value is for V6 based ML6-5 evaluation platform.
CONFIG PART = xc6vlx240tff1156-1;

# Locate the Tri-Mode Ethernet MAC instance
INST "*v6_emac" LOC = "TEMAC_X0Y0";

###############################################################################
# CLOCK CONSTRAINTS
# The following constraints are required. If you choose to not use the example
# design level of wrapper hierarchy, the net names should be translated to
# match your design.
###############################################################################
##### Modifications ######
NET "RESET"		LOC = G26;   # centre push-button
INST SYSCLK_N LOC = H9 ;
INST SYSCLK_P LOC = J9 ;
NET SYSCLK_P TNM_NET = sysclk;
TIMEGRP sysclk_grp = sysclk;
TIMESPEC TS_sysclk = PERIOD sysclk_grp 5 ns HIGH 50 %;
NET "PHY_RESET" LOC = "AH13";


# Ethernet GTX_CLK high quality 125 MHz reference clock
NET "v6_emac_inst/GTX_CLK" TNM_NET = "ref_gtx_clk";
TIMEGRP "v6_emac_v1_6_clk_ref_gtx" = "ref_gtx_clk";
TIMESPEC "TS_v6_emac_v1_6_clk_ref_gtx" = PERIOD "v6_emac_v1_6_clk_ref_gtx" 8 ns HIGH 50 %;

# Ethernet GMII PHY-side receive clock
NET "GMII_RX_CLK" TNM_NET = "phy_clk_rx";
TIMEGRP "v6_emac_v1_6_clk_phy_rx" = "phy_clk_rx";
TIMESPEC "TS_v6_emac_v1_6_clk_phy_rx" = PERIOD "v6_emac_v1_6_clk_phy_rx" 7.5 ns HIGH 50 %;

# IDELAYCTRL 200 MHz reference clock
NET "v6_emac_inst/REFCLK" TNM_NET  = "clk_ref_clk";
TIMEGRP "ref_clk" = "clk_ref_clk";
TIMESPEC "TS_ref_clk" = PERIOD "ref_clk" 5 ns HIGH 50 %;

# CLOCKING SOURCE FOR USER H/W ON ETHERNET
NET "v6_emac_inst/usr_clk" TNM_NET = "clk_usr_eth";
TIMEGRP "v6_emac_v1_6_usr_clk" = "clk_usr_eth";
TIMESPEC "TS_usr_clk_eth" = PERIOD "v6_emac_v1_6_usr_clk" 8 ns HIGH 50 %;
###############################################################################
# PHYSICAL INTERFACE CONSTRAINTS
# The following constraints are necessary for proper operation, and are tuned
# for this example design. They should be modified to suit your design.
###############################################################################

# GMII physical interface constraints
# -----------------------------------------------------------------------------

# Set the IDELAY values on the PHY inputs, tuned for this example design.
# These values should be modified to suit your design.
INST "*gmii?ideldv"    IDELAY_VALUE = 26;
INST "*gmii?ideld0"    IDELAY_VALUE = 26;
INST "*gmii?ideld1"    IDELAY_VALUE = 26;
INST "*gmii?ideld2"    IDELAY_VALUE = 26;
INST "*gmii?ideld3"    IDELAY_VALUE = 26;
INST "*gmii?ideld4"    IDELAY_VALUE = 26;
INST "*gmii?ideld5"    IDELAY_VALUE = 26;
INST "*gmii?ideld6"    IDELAY_VALUE = 26;
INST "*gmii?ideld7"    IDELAY_VALUE = 26;
INST "*gmii?ideler"    IDELAY_VALUE = 26;
INST "*gmii_rxc_delay" IDELAY_VALUE = 0;
INST "*gmii_rxc_delay" SIGNAL_PATTERN = CLOCK;

# Group all IDELAY-related blocks to use a single IDELAYCTRL
INST "*dlyctrl" IODELAY_GROUP = gmii_idelay;
INST "*ideld?"  IODELAY_GROUP = gmii_idelay;
INST "*ideldv"  IODELAY_GROUP = gmii_idelay;
INST "*ideler"  IODELAY_GROUP = gmii_idelay;
INST "*gmii_rxc_delay" IODELAY_GROUP = gmii_idelay;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2ns setup time and 0 hold time.
INST "GMII_RXD<?>" TNM = "gmii_rx";
INST "GMII_RX_DV"  TNM = "gmii_rx";
INST "GMII_RX_ER"  TNM = "gmii_rx";
TIMEGRP "gmii_rx" OFFSET = IN 2 ns VALID 2 ns BEFORE "GMII_RX_CLK" RISING;


# Constrain the GMII physical interface flip-flops to IOBs
INST "*gmii?RXD_TO_MAC*"  IOB = true;
INST "*gmii?RX_DV_TO_MAC" IOB = true;
INST "*gmii?RX_ER_TO_MAC" IOB = true;
INST "*gmii?GMII_TXD_?"   IOB = true;
INST "*gmii?GMII_TX_EN"   IOB = true;
INST "*gmii?GMII_TX_ER"   IOB = true;

# Location constraints are chosen for this example design.
# These values should be modified to suit your design.


INST "GMII_TXD<0>" LOC = "AM11";
INST "GMII_TXD<1>" LOC = "AL11";
INST "GMII_TXD<2>" LOC = "AG10";
INST "GMII_TXD<3>" LOC = "AG11";
INST "GMII_TXD<4>" LOC = "AL10";
INST "GMII_TXD<5>" LOC = "AM10";
INST "GMII_TXD<6>" LOC = "AE11";
INST "GMII_TXD<7>" LOC = "AF11";
INST "GMII_TX_EN"  LOC = "AJ10";
INST "GMII_TX_ER"  LOC = "AH10";
INST "GMII_TX_CLK" LOC = "AH12";
INST "GMII_RXD<0>" LOC = "AN13";
INST "GMII_RXD<1>" LOC = "AF14";
INST "GMII_RXD<2>" LOC = "AE14";
INST "GMII_RXD<3>" LOC = "AN12";
INST "GMII_RXD<4>" LOC = "AM12";
INST "GMII_RXD<5>" LOC = "AD11";
INST "GMII_RXD<6>" LOC = "AC12";
INST "GMII_RXD<7>" LOC = "AC13";
INST "GMII_RX_DV"  LOC = "AM13";
INST "GMII_RX_ER"  LOC = "AG12";
INST "GMII_RX_CLK" LOC = "AP11";


# Locate the 125 MHz reference clock buffer
INST "v6_emac_inst/bufg_tx" LOC = "BUFGCTRL_X0Y6";

# Locate the 200 MHz delay controller clock buffer
INST "v6_emac_inst/refclk_bufg" LOC = "BUFGCTRL_X0Y7";

###############################################################################
# LOCALLINK FIFO CONSTRAINTS
# The following constraints are necessary for proper operation of the LocalLink
# FIFO. If you choose to not use the LocalLink level of wrapper hierarchy,
# these constraints should be removed.
###############################################################################

# LocalLink client FIFO transmit-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*client_side_FIFO?tx_fifo_i?rd_tran_frame_tog"    TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO?tx_fifo_i?rd_retran_frame_tog"  TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO?tx_fifo_i?rd_addr_txfer*"       TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO?tx_fifo_i?rd_txfer_tog"         TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO?tx_fifo_i?wr_frame_in_fifo"     TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr" = FROM "tx_fifo_rd_to_wr" TO "v6_emac_v1_6_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd" = FROM "tx_fifo_wr_to_rd" TO "v6_emac_v1_6_clk_ref_gtx" 8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*client_side_FIFO?tx_fifo_i?wr_tran_frame_tog"    TNM = "tx_metastable";
INST "*client_side_FIFO?tx_fifo_i?wr_rd_addr*"          TNM = "tx_metastable";
INST "*client_side_FIFO?tx_fifo_i?wr_txfer_tog"         TNM = "tx_metastable";
INST "*client_side_FIFO?tx_fifo_i?frame_in_fifo"        TNM = "tx_metastable";
INST "*client_side_FIFO?tx_fifo_i?wr_retran_frame_tog*" TNM = "tx_metastable";
INST "*client_side_FIFO?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable";
TIMESPEC "TS_tx_meta_protect" = FROM "tx_metastable" 5 ns DATAPATHONLY;

# Transmit-side client FIFO address bus timing
INST "*client_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_addr_rd";
INST "*client_side_FIFO?tx_fifo_i?wr_rd_addr*"    TNM = "tx_addr_wr";
TIMESPEC "TS_tx_fifo_addr" = FROM "tx_addr_rd" TO "tx_addr_wr" 10 ns;

# LocalLink client FIFO receive-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*client_side_FIFO?rx_fifo_i?wr_store_frame_tog" TNM = "rx_fifo_wr_to_rd";
INST "*client_side_FIFO?rx_fifo_i?rd_addr_gray*"      TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd" = FROM "rx_fifo_wr_to_rd" TO "v6_emac_v1_6_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr" = FROM "rx_fifo_rd_to_wr" TO "v6_emac_v1_6_clk_phy_rx"  8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*client_side_FIFO?rx_fifo_i?wr_rd_addr_gray_sync*" TNM = "rx_metastable";
INST "*client_side_FIFO?rx_fifo_i?rd_store_frame_tog"    TNM = "rx_metastable";
TIMESPEC "TS_rx_meta_protect" = FROM "rx_metastable" 5 ns;






###################### PCIE CONSTRAINTS #############################3
# SYS reset (input) signal.  The sys_reset_n signal should be
# obtained from the PCI Express interface if possible.  For
# slot based form factors, a system reset signal is usually
# present on the connector.  For cable based form factors, a
# system reset signal may not be available.  In this case, the
# system reset signal must be generated locally by some form of
# supervisory circuit.  You may change the IOSTANDARD and LOC
# to suit your requirements and VCCO voltage banking rules.
#

NET "sys_reset_n" TIG;
NET "sys_reset_n" LOC = AE13 | IOSTANDARD = LVCMOS25 | PULLUP | NODELAY ;

#
#
# SYS clock 250 MHz (input) signal. The sys_clk_p and sys_clk_n
# signals are the PCI Express reference clock. Virtex-6 GT
# Transceiver architecture requires the use of a dedicated clock
# resources (FPGA input pins) associated with each GT Transceiver.
# To use these pins an IBUFDS primitive (refclk_ibuf) is
# instantiated in user's design.

#NET "sys_clk_p" LOC = V6;
#NET "sys_clk_n" LOC = V5;
INST "riffa_pcie_inst/refclk_ibuf" LOC = IBUFDS_GTXE1_X0Y4;

#
# Transceiver instance placement. 
#

# PCIe Lane 0
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[0].GTX" LOC = GTXE1_X0Y15;

# PCIe Lane 1
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[1].GTX" LOC = GTXE1_X0Y14;

# PCIe Lane 2
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[2].GTX" LOC = GTXE1_X0Y13;

# PCIe Lane 3
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[3].GTX" LOC = GTXE1_X0Y12;

# PCIe Lane 4
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[4].GTX" LOC = GTXE1_X0Y11;

# PCIe Lane 5
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[5].GTX" LOC = GTXE1_X0Y10;

# PCIe Lane 6
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[6].GTX" LOC = GTXE1_X0Y9;

# PCIe Lane 7
INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_gt_i/gtx_v6_i/GTXD[7].GTX" LOC = GTXE1_X0Y8;




#
# PCI Express Block placement. This constraint selects the PCI Express
# Block to be used.
#

INST "riffa_pcie_inst/core*/pcie_2_0_i/pcie_block_i" LOC = PCIE_X0Y1;

#NET  "led_0"           LOC = "AC22"   ;
#NET  "led_1"           LOC = "AC24"   ;
#NET  "led_2"           LOC = "AE22"  ;

#
# MMCM Placment. This constraint selects the MMCM Placement
#
INST "riffa_pcie_inst/core*/pcie_clocking_i/mmcm_adv_i" LOC = MMCM_ADV_X0Y7;


###############################################################################
# Timing Constraints
###############################################################################

#
# Timing requirements and related constraints.
#

NET "riffa_pcie_inst/sys_clk_c" TNM_NET = "SYSCLK" ;
NET "riffa_pcie_inst/core*/pcie_clocking_i/clk_125" TNM_NET = "CLK_125" ;
NET "riffa_pcie_inst/core*/pcie_clocking_i/clkout4" TNM_NET = "CLK_USR_PCIE" ;
NET "riffa_pcie_inst/core*/TxOutClk_bufg" TNM_NET = "TXOUTCLKBUFG";
NET "riffa_pcie_inst/core*/pcie_clocking_i/clk_250" TNM_NET = "CLK_250" ;

TIMESPEC "TS_SYSCLK"  = PERIOD "SYSCLK" 250 MHz HIGH 50 % ;
TIMESPEC "TS_CLK_125"  = PERIOD "CLK_125" TS_SYSCLK/2 HIGH 50 % PRIORITY 100 ;
TIMESPEC "TS_CLK_USR_PCIE"  = PERIOD "CLK_USR_PCIE" 250 MHz HIGH 50 % PRIORITY 100 ;
TIMESPEC "TS_TXOUTCLKBUFG"  = PERIOD "TXOUTCLKBUFG" 250 MHz HIGH 50 % PRIORITY 100 ;
TIMESPEC "TS_CLK_250" = PERIOD "CLK_250" TS_SYSCLK*1 HIGH 50 % PRIORITY 1;


PIN "riffa_pcie_inst/core*/trn_reset_n_int_i.CLR" TIG ;
PIN "riffa_pcie_inst/core*/trn_reset_n_i.CLR" TIG ;
PIN "riffa_pcie_inst/core*/pcie_clocking_i/mmcm_adv_i.RST" TIG ;
#Pin "riffa_pcie_inst/app/endpoint/endpoint64.endpoint/channels[1].channel/rxPort/rRst" TIG;

### Resets are multi cycle resets. Adding them to ignore timing list ###
PIN "riffa_pcie_inst/app/endpoint/endpoint64.endpoint/rRst_prebuf" TIG;

TIMESPEC "TS_RESETN" = FROM FFS(*) TO FFS(riffa_pcie_inst/user_reset_n_i) 8 ns;



###############################################################################
# End
###############################################################################

